# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/debase/all/debase.rbi
#
# debase-0.2.4.1

module Debase
  def breakpoints; end
  def catchpoints; end
  def contexts; end
  def current_context; end
  def debug_load(*arg0); end
  def enable_file_filtering(arg0); end
  def enable_trace_points; end
  def init_variables; end
  def prepare_context; end
  def remove_tracepoints; end
  def self.add_breakpoint(file, line, expr = nil); end
  def self.add_catchpoint(exception); end
  def self.breakpoints; end
  def self.catchpoints; end
  def self.clear_catchpoints; end
  def self.contexts; end
  def self.current_context; end
  def self.debug; end
  def self.debug_load(*arg0); end
  def self.enable_file_filtering(arg0); end
  def self.enable_trace_points; end
  def self.file_filter; end
  def self.handler; end
  def self.handler=(arg0); end
  def self.init_variables; end
  def self.keep_frame_binding; end
  def self.keep_frame_binding=(arg0); end
  def self.last_context; end
  def self.monkey_patch_prepend; end
  def self.post_mortem?; end
  def self.prepare_context; end
  def self.remove_breakpoint(id); end
  def self.remove_catchpoint(exception); end
  def self.remove_tracepoints; end
  def self.set_trace_flag_to_iseq(arg0); end
  def self.setup_tracepoints; end
  def self.skip; end
  def self.source_reload; end
  def self.start(options = nil, &block); end
  def self.start_; end
  def self.started?; end
  def self.stop; end
  def self.tracing; end
  def self.tracing=(arg0); end
  def self.unset_iseq_flags(arg0); end
  def self.verbose=(arg0); end
  def self.verbose?; end
  def set_trace_flag_to_iseq(arg0); end
  def setup_tracepoints; end
  def started?; end
  def unset_iseq_flags(arg0); end
  def verbose=(arg0); end
  def verbose?; end
end
class Debase::Context
  def at_breakpoint(breakpoint); end
  def at_catchpoint(excpt); end
  def at_line(file, line); end
  def at_return(file, line); end
  def at_tracing(file, line); end
  def dead?; end
  def frame_args_info(frame_no = nil); end
  def frame_binding(*arg0); end
  def frame_class(frame_no = nil); end
  def frame_file(*arg0); end
  def frame_line(*arg0); end
  def frame_locals(frame_no = nil); end
  def frame_self(*arg0); end
  def handler; end
  def ignored?; end
  def pause; end
  def stack_size; end
  def step(*arg0); end
  def step_over(*arg0); end
  def stop_frame=(arg0); end
  def stop_next=(*arg0); end
  def stop_reason; end
  def thnum; end
  def thread; end
end
class Debase::Breakpoint
  def enabled; end
  def enabled=(arg0); end
  def expr; end
  def expr=(arg0); end
  def id; end
  def initialize(arg0, arg1, arg2); end
  def pos; end
  def self.find(arg0, arg1, arg2, arg3); end
  def self.remove(arg0, arg1); end
  def source; end
end
module InvalidName___Class_0x00___InstructionSequenceMixin_23
  def do_set_flags(iseq); end
  def load_iseq(path); end
end
class Debase::FileFilter
  def accept?(file_path); end
  def disable; end
  def enable; end
  def exclude(file_path); end
  def excluded; end
  def include(file_path); end
  def included; end
  def initialize; end
end
class Debase::DebugThread < Thread
  def self.inherited; end
end
